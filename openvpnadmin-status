#!/bin/bash

clear

if [ "$EUID" -ne 0 ]
  then echo "Please run as root"
  exit
fi

input_file=/etc/openvpn/openvpn-status.log


declare -a client                                               # array to store client names
declare -a recvd						# array to store client MB received
declare -a sent							# array to store client MB sent
declare -a since						# array to store client *connected since* info
declare -a ippub						# array to store client publice IPs (and ports)
declare -a ippriv						# array to store client private IPs

i=0                                                             # keep a count of total lines
mbsent=0							# keep total count of MB sent
mbrecd=0							# keep total count of MB rec'd

while read line; do                                             # loop through all input lines from file
    if [[ "$line" = *,* ]]; then                                # if line has a comma in it, it may contain usable data
        IFS=',' read -ra fields <<< "$line"                     # convert string to array, split by comma
        if [[ "${fields[1]}" =~ \.[0-9]{1,3}:[0-9] ]]; then     # if 2nd field seems to contain an ip address:
                recvd[$i]=$((fields[2] / 2**20))                #   convert bytes received to MB, store in recvd array
	mbrecd=$((mbrecd + ${recvd[$i]}))		# keep track of total bytes received amongst all clients
                sent[$i]=$((fields[3] / 2**20))                 #   convert bytes sent to MB, store in sent array
    mbsent=$((mbsent + ${sent[$i]}))			# keep track of total bytes sent amongst all clients
                client[$i]="${fields[0]}"			#   store client name into client array
	since[$i]="${fields[4]}"			#   store connected since data into since array
	ippub[$i]="${fields[1]}"			#   store public IP and port into ippub array
                i=$((i+1))                                      #   increment record counter to track total clients
        fi
        if [[ "${fields[2]}" =~ \.[0-9]{1,3}:[0-9] ]]; then     # if 3rd field seems to contain an ip address:
	for (( k=0; k<$i; k++ ))			# clients in 2nd half of log aren't always in order
	do						#   so loop through them until we find the right one
	    if [[ "${fields[1]}" == "${client[$k]}" ]]; then	# this logic isn't working currently
	                ippriv[$k]="${fields[0]}"       # store the private ip into ippriv array
	    fi
	done
        fi
    fi
done < $input_file

# output header columns -- feel free to customize ordering (must change in loop below as well)
#printf '%-20s\t%-20s\t%8s\t%8s\t%-26s\t%-15s\n' "Client" "From (IP:port)" "MB Sent" "MB Recvd" "Connected Since" "Private IP"
#printf '%-20s\t%-20s\t%8s\t%8s\t%-26s\t%-15s\n' "------" "--------------" "-------" "--------" "---------------" "----------"

MESSAGE=""

if (systemctl -q is-active openvpn@server)
    then
    MESSAGE+="OpenVPN is active [OK]\n"
    else
    MESSAGE+="OpenVPN is inactive [WARN]\n"
fi

if (systemctl -q is-active nginx)
    then
    MESSAGE+="Nginx is active [WARN]\n"
    else
    MESSAGE+="Nginx is inactive [OK]\n"
fi

MESSAGE+="--------------------------------------------------------------\n"

for (( j=0; j<$i; j++ ))                # loop through the client records
do
    MESSAGE+="${client[$j]} (${ippriv[$j]})-> ${ippub[$j]} (${since[$j]})\n"
done

let i=$i+6
let WIDTH=2*$i
#whiptail --msgbox "${MESSAGE}" $WIDTH 100

OPTION=$(whiptail --title  "OpenVPN Admin Console" --menu  "${MESSAGE}" $WIDTH 100 5 \
"1" "Create New Configuration File (.ovpn)" \
"2" "List of Certificates" \
"3" "Revoke Certificate and Delete .OVPN-file" \
"4" "Start/Stop Nginx Server" \
"5" "Restart OpenVPN Server"  3>&1 1>&2 2>&3)

#if (OPTION==4)
#    then
#    ./openvpnadmin-nginx
#fi

exitstatus=$?
if [ $exitstatus = 0 ]; then
    if [[ $OPTION -eq 1 ]]; then
	./openvpnadmin-createovpn
    elif [[ $OPTION -eq 2 ]]; then
	./openvpnadmin-listcrt
    elif [[ $OPTION -eq 3 ]]; then
	./openvpnadmin-revoke
    elif [[ $OPTION -eq 4 ]]; then
	./openvpnadmin-nginx
    elif [[ $OPTION -eq 5 ]]; then
	./openvpnadmin-restart
	else
	echo "other"
    fi
else
    echo "Interrupted..."
fi
